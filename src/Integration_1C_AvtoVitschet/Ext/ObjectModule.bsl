//ПЕРЕД ПЕРЕВОДОМ НА ПРОД ОТРАБОТАТЬ ВСЕ TODO

Перем Контекст;

#Область ПрограммныйИнтерфейс

//Инициализирует контекст исполнения кода и получает AccessToken
Функция АвторизацияНА(Отладка, НомерЗП = 1) Экспорт 
	
	ИнициализироватьКонтекст(Отладка = Ложь, НомерЗП);
		
	Возврат Контекст;
	
КонецФункции

//Используется для регистрации открытого ключа ЭЦП в ПП Вычеты
Функция РегистрацияНАвППВычеты(Отладка = Ложь, НомерЗП = 1, СместитьВремя = Ложь) Экспорт 
	
	ИнициализироватьКонтекст(Отладка, НомерЗП);
	
	л_ФабрикаXDTO 							= СоздатьФабрикуXDTOПоСхеме("Cообщение_ИО_100_xsd");
	
	СвойствоXDTO_Файл						= л_ФабрикаXDTO.Пакеты.Получить("http://openapi-rest.gnivc.ru/registration").КорневыеСвойства.Получить("Файл"); 
	ОбъектXDTO_Файл							= л_ФабрикаXDTO.Создать(СвойствоXDTO_Файл.Тип); 
	ОбъектXDTO_Файл.ИдДок					= СтрШаблон("SOOBIO_%1_%2_%3"
															, Контекст.ИнфоОбОрганизации.ИНН
															, Формат(ТекущаяДата(), "ДФ=ггггММдд")
															, СтрЗаменить(Новый УникальныйИдентификатор(), "-", ""));
	ОбъектXDTO_Файл.ВерсФорм				= "1.00";												
	
	СвойствоXDTO_Документ					= СвойствоXDTO_Файл.Тип.Свойства.Получить("Документ");
	ОбъектXDTO_Документ						= л_ФабрикаXDTO.Создать(СвойствоXDTO_Документ.Тип);
	ОбъектXDTO_Документ.КодДок				= "007";
	ОбъектXDTO_Документ.ДатаЗП				= Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг");
	ОбъектXDTO_Документ.ВремяЗП				= Формат(ТекущаяДата() - ?(СместитьВремя, 3700, 0), "ДФ=ЧЧ:мм:сс");
	ОбъектXDTO_Документ.НомерЗП				= Контекст.НомерЗП;			//Принимает значение: 1 – первичный документ,2, 3 и так далее – в случае представления уточненного документа в отношении конкретного участника информационного обмена
	ОбъектXDTO_Документ.ОткрытЧКлюч			= СтрЗаменить(СтрЗаменить(СтрЗаменить(ПолучитьМакет("ОткрытЧКлюч").ПолучитьТекст(), Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, ""); 	//todo обновить открытую часть ключа на реальную на проде
	//добавляем инвестиционные вычеты 
	ОбъектXDTO_Документ.СвВыч.Добавить("01");	
	ОбъектXDTO_Документ.СвВыч.Добавить("02");
	
	СвойствоXDTO_СвУчИО						= СвойствоXDTO_Документ.Тип.Свойства.Получить("СвУчИО");
	ОбъектXDTO_СвУчИО						= л_ФабрикаXDTO.Создать(СвойствоXDTO_СвУчИО.Тип);
	ОбъектXDTO_СвУчИО.ИННУчИО				= Контекст.ИнфоОбОрганизации.ИНН;
	ОбъектXDTO_СвУчИО.КППУчИО				= Контекст.ИнфоОбОрганизации.КПП;
	ОбъектXDTO_СвУчИО.НаимУчИО				= Контекст.ИнфоОбОрганизации.Наименование;
	ОбъектXDTO_СвУчИО.ЛоготипУчИО			= ПолучитьМакет("Логотип");
	ОбъектXDTO_Документ.СвУчИО				= ОбъектXDTO_СвУчИО;
	
	СвойствоXDTO_СвКонтакт					= СвойствоXDTO_Документ.Тип.Свойства.Получить("СвКонтакт");
    ОбъектXDTO_СвКонтакт					= л_ФабрикаXDTO.Создать(СвойствоXDTO_СвКонтакт.Тип);
	ОбъектXDTO_СвКонтакт.АдресЭл			= Контекст.ИнфоКонтактногоЛица.Email;
	ОбъектXDTO_СвКонтакт.Телефон			= Контекст.ИнфоКонтактногоЛица.Телефон;
	СвойствоXDTO_ФИОКонтакт					= СвойствоXDTO_СвКонтакт.Тип.Свойства.Получить("ФИОКонтакт");
    ОбъектXDTO_ФИОКонтакт					= л_ФабрикаXDTO.Создать(л_ФабрикаXDTO.Тип("http://openapi-rest.gnivc.ru/registration", "ФИОТип"));
	ОбъектXDTO_ФИОКонтакт.Фамилия			= Контекст.ИнфоКонтактногоЛица.Фамилия;
	ОбъектXDTO_ФИОКонтакт.Имя				= Контекст.ИнфоКонтактногоЛица.Имя;
	ОбъектXDTO_ФИОКонтакт.Отчество			= Контекст.ИнфоКонтактногоЛица.Отчество;
	ОбъектXDTO_СвКонтакт.ФИОКонтакт			= ОбъектXDTO_ФИОКонтакт;
	ОбъектXDTO_Документ.СвКонтакт			= ОбъектXDTO_СвКонтакт;
	
	ОбъектXDTO_Файл.Документ               	= ОбъектXDTO_Документ;
	
	ЗаписьXML 								= Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(Контекст.Кодировка));
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	л_ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO_Файл, "Файл"); 
	СтрокаXML 								= ЗаписьXML.Закрыть();
	СтрокаXML = СтрЗаменить(СтрокаXML, " xsi:type=""xs:string""", "");
	СтрокаXML = СтрЗаменить(СтрокаXML, "xmlns=""http://openapi-rest.gnivc.ru/registration""", ""); 
	
	HTTPЗапрос = Новый HTTPЗапрос("/taxbenefits/v1/registration");	
	HTTPЗапрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Контекст.AccessTokenStruct.AccessTokenBase64));
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Новый Структура("contentBase64", ЗакодироватьСтрокувBase64(СтрокаXML))); 
	СтрокаJSON = ЗаписьJSON.Закрыть();
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON); 
	
	Если Контекст.Отладка Тогда 
		Заголовки 		= Новый Структура("Authorization", HTTPЗапрос.Заголовки.Получить("Authorization"));
		СтруктураОтвет	= Новый Структура("Headers, Body", Заголовки, СтрокаJSON);
	Иначе 
		HTTPОтвет 		= Контекст.HTTPСоединение.POST(HTTPЗапрос);
	
		JSONОтвет		= HTTPОтвет.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON		= Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(JSONОтвет);
		СтруктураОтвет	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();			
	КонецЕсли;
	
	Возврат СтруктураОтвет;
	
КонецФункции

//Используется для передачи запроса на инвестиционный налоговой вычет тип А
Функция ЗапросНаПередачуНалоговогоВычетаИнвестицииТипА(Отладка, СведенияФЛ) Экспорт 

	ИнициализироватьКонтекст(Отладка);
	
	л_ФабрикаXDTO 							= СоздатьФабрикуXDTOПоСхеме("SOOBSCHTYPEА_101_xsd");
	
	СвойствоXDTO_Файл						= л_ФабрикаXDTO.Пакеты.Получить("http://openapi-rest.gnivc.ru/application_typeA").КорневыеСвойства.Получить("Файл"); 
	ОбъектXDTO_Файл							= л_ФабрикаXDTO.Создать(СвойствоXDTO_Файл.Тип); 
	ОбъектXDTO_Файл.ИдДок					= СтрШаблон("SOOBSCHTYPEA_%1_%2_%3"
															, Контекст.ИнфоОбОрганизации.ИНН
															, Формат(ТекущаяДата(), "ДФ=ггггММдд")
															, СтрЗаменить(Новый УникальныйИдентификатор(), "-", ""));
	ОбъектXDTO_Файл.ВерсФорм				= "1.01";												
	
	СвойствоXDTO_Документ					= СвойствоXDTO_Файл.Тип.Свойства.Получить("Документ");
	ОбъектXDTO_Документ						= л_ФабрикаXDTO.Создать(СвойствоXDTO_Документ.Тип);
	ОбъектXDTO_Документ.КНД					= "1184035";
	ОбъектXDTO_Документ.ДатаСвед			= Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг");
	ОбъектXDTO_Документ.ВремяСвед			= Формат(ТекущаяДата(), "ДФ=ЧЧ:мм:сс");
	ОбъектXDTO_Документ.НомерСвед			= СведенияФЛ.НомерСвед;
	
	ОбъектXDTO_Документ.СвПрофУч			= ЗаполнитьСвПрофУч(л_ФабрикаXDTO, СвойствоXDTO_Документ);
	ОбъектXDTO_Документ.СвФЛ                = ЗаполнитьСвФЛ(л_ФабрикаXDTO, СвойствоXDTO_Документ, СведенияФЛ, "http://openapi-rest.gnivc.ru/application_typeA");
	ОбъектXDTO_Документ.СвИИСФЛ             = ЗаполнитьСвИИСФЛ(л_ФабрикаXDTO, СвойствоXDTO_Документ, СведенияФЛ, "А");
	ОбъектXDTO_Файл.Документ               	= ОбъектXDTO_Документ;
	
	ЗаписьXML 								= Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(Контекст.Кодировка));
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	л_ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO_Файл, "Файл"); 
	СтрокаXML 								= ЗаписьXML.Закрыть();
	СтрокаXML								= СтрЗаменить(СтрокаXML, " xsi:type=""xs:string""", "");
	СтрокаXML								= СтрЗаменить(СтрокаXML, " xsi:type=""УдЛичнФЛТип""", "");
	СтрокаXML								= СтрЗаменить(СтрокаXML, " xsi:type=""ФИОТип""", "");	
	СтрокаXML								= СтрЗаменить(СтрокаXML, "xmlns=""http://openapi-rest.gnivc.ru/application_typeA""", ""); 

	ПутьКФайлу								= СоздатьФайлИзСтроки(СтрокаXML);
	Подпись									= ПодписатьФайл(ПутьКФайлу, Истина);
	
	HTTPЗапрос = Новый HTTPЗапрос("/taxbenefits/v1/application/002");	
	HTTPЗапрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Контекст.AccessTokenStruct.AccessTokenBase64));
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Новый Структура("contentBase64, contentSignatureBase64", ЗакодироватьФайлВBase64(ПутьКФайлу), Подпись)); 
	СтрокаJSON = ЗаписьJSON.Закрыть();
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON); 
	
	Если НЕ Контекст.Отладка Тогда 
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли;
	
	Если Контекст.Отладка Тогда 
		Заголовки 		= Новый Структура("Authorization", HTTPЗапрос.Заголовки.Получить("Authorization"));
		СтруктураОтвет	= Новый Структура("Headers, Body, XMLText, XMLPath, SingPath", Заголовки, СтрокаJSON, СтрокаXML, ПутьКФайлу, СтрШаблон("%1.sgn", ПутьКФайлу));
	Иначе 
		HTTPОтвет 		= Контекст.HTTPСоединение.POST(HTTPЗапрос);
	
		JSONОтвет		= HTTPОтвет.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON		= Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(JSONОтвет);
		СтруктураОтвет	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();			
	КонецЕсли;
	
	Возврат СтруктураОтвет;

	
КонецФункции	

//Используется для передачи запроса на инвестиционный налоговой вычет тип Б
Функция ЗапросНаПередачуНалоговогоВычетаИнвестицииТипБ(Отладка, СведенияФЛ) Экспорт 
	
	ИнициализироватьКонтекст(Отладка);
	
	л_ФабрикаXDTO 							= СоздатьФабрикуXDTOПоСхеме("ZAPROSTYPEB_101_xsd");
	
	СвойствоXDTO_Файл						= л_ФабрикаXDTO.Пакеты.Получить("http://openapi-rest.gnivc.ru/application_typeB").КорневыеСвойства.Получить("Файл"); 
	ОбъектXDTO_Файл							= л_ФабрикаXDTO.Создать(СвойствоXDTO_Файл.Тип); 
	ОбъектXDTO_Файл.ИдДок					= СтрШаблон("ZAPROSTYPEB_%1_%2_%3"
															, Контекст.ИнфоОбОрганизации.ИНН
															, Формат(ТекущаяДата(), "ДФ=ггггММдд")
															, СтрЗаменить(Новый УникальныйИдентификатор(), "-", ""));
	ОбъектXDTO_Файл.ВерсФорм				= "1.01";												
	
	СвойствоXDTO_Документ					= СвойствоXDTO_Файл.Тип.Свойства.Получить("Документ");
	ОбъектXDTO_Документ						= л_ФабрикаXDTO.Создать(СвойствоXDTO_Документ.Тип);
	ОбъектXDTO_Документ.КНД					= "1184033";
	ОбъектXDTO_Документ.ДатаЗП				= Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг");
	ОбъектXDTO_Документ.ВремяЗП				= Формат(ТекущаяДата(), "ДФ=ЧЧ:мм:сс");
	ОбъектXDTO_Документ.НомерЗП				= СведенияФЛ.НомерСвед;
	
	ОбъектXDTO_Документ.СвПрофУч			= ЗаполнитьСвПрофУч(л_ФабрикаXDTO, СвойствоXDTO_Документ);
	ОбъектXDTO_Документ.СвФЛ                = ЗаполнитьСвФЛ(л_ФабрикаXDTO, СвойствоXDTO_Документ, СведенияФЛ, "http://openapi-rest.gnivc.ru/application_typeB");
	ОбъектXDTO_Документ.СвИИСФЛ             = ЗаполнитьСвИИСФЛ(л_ФабрикаXDTO, СвойствоXDTO_Документ, СведенияФЛ, "B");
	ОбъектXDTO_Файл.Документ               	= ОбъектXDTO_Документ;
	
	ЗаписьXML 								= Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(Контекст.Кодировка));
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	л_ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO_Файл, "Файл"); 
	СтрокаXML 								= ЗаписьXML.Закрыть();
	СтрокаXML								= СтрЗаменить(СтрокаXML, " xsi:type=""xs:string""", "");
	СтрокаXML								= СтрЗаменить(СтрокаXML, " xsi:type=""УдЛичнФЛТип""", "");
	СтрокаXML								= СтрЗаменить(СтрокаXML, " xsi:type=""ФИОТип""", "");	
	СтрокаXML								= СтрЗаменить(СтрокаXML, "xmlns=""http://openapi-rest.gnivc.ru/application_typeB""", ""); 

	ПутьКФайлу								= СоздатьФайлИзСтроки(СтрокаXML);
	Подпись									= ПодписатьФайл(ПутьКФайлу, Истина);
	
	HTTPЗапрос = Новый HTTPЗапрос("/taxbenefits/v1/application/001");	
	HTTPЗапрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Контекст.AccessTokenStruct.AccessTokenBase64));
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Новый Структура("contentBase64, contentSignatureBase64", ЗакодироватьФайлВBase64(ПутьКФайлу), Подпись)); 
	СтрокаJSON = ЗаписьJSON.Закрыть();
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON); 
	
	УдалитьФайлы(ПутьКФайлу);
	
	Если Контекст.Отладка Тогда 
		Заголовки 		= Новый Структура("Authorization", HTTPЗапрос.Заголовки.Получить("Authorization"));
		СтруктураОтвет	= Новый Структура("Headers, Body", Заголовки, СтрокаJSON);
	Иначе 
		HTTPОтвет 		= Контекст.HTTPСоединение.POST(HTTPЗапрос);
	
		JSONОтвет		= HTTPОтвет.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON		= Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(JSONОтвет);
		СтруктураОтвет	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();			
	КонецЕсли;
	
	Возврат СтруктураОтвет;

КонецФункции	

//Используется для получения статуса обработки запроса на налоговый вычет
Функция ПолучениеСтатусаОбработкиЗапросаНаНалоговыйВычет(Отладка, requestId) Экспорт 
	
	ИнициализироватьКонтекст(Отладка);

	HTTPЗапрос = Новый HTTPЗапрос(СтрШаблон("/taxbenefits/v1/application/status/%1", requestId));	
	HTTPЗапрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Контекст.AccessTokenStruct.AccessTokenBase64));
	
	Если Контекст.Отладка Тогда 
		Заголовки 		= Новый Структура("Authorization", HTTPЗапрос.Заголовки.Получить("Authorization"));
		СтруктураОтвет	= Новый Структура("Address, Headers", HTTPЗапрос.АдресРесурса, Заголовки);
	Иначе 
		HTTPОтвет 		= Контекст.HTTPСоединение.Get(HTTPЗапрос);
	
		JSONОтвет		= HTTPОтвет.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON		= Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(JSONОтвет);
		СтруктураОтвет	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();			
	КонецЕсли;
	
	Возврат СтруктураОтвет;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьКонтекст(Отладка = Ложь, НомерЗП = 1) 
	
	Если Контекст = Неопределено Тогда 
		Контекст = Новый Структура;
		Контекст.Вставить("Отладка",								Отладка);
		Контекст.Вставить("НомерЗП",								НомерЗП);
		Контекст.Вставить("Кодировка",								"UTF-8");
		
		//параметры подключения
		//тестовый сервер ПП "Автовычет" https://openapi-rest.gnivc.ru:8090/ 
		ПараметрыПодключения = Новый Структура; 
		ПараметрыПодключения.Вставить("АдресРесурса",				"openapi-rest.gnivc.ru");
		ПараметрыПодключения.Вставить("ПортРесурса",				8090);
		ПараметрыПодключения.Вставить("ИспользоватьSSL",			Истина);
		Контекст.Вставить("ПараметрыПодключения",					ПараметрыПодключения);
		
		
		//параметры авторизации
		Контекст.Вставить("masterToken",							Новый Структура("masterToken", "todo_enter_your_masterToken"));
		
		Контекст.Вставить("HTTPСоединение", Новый HTTPСоединение(Контекст.ПараметрыПодключения.АдресРесурса
																	, Контекст.ПараметрыПодключения.ПортРесурса
																	,
																	,
																	,
																	, 150
																	, Новый ЗащищенноеСоединениеOpenSSL()));
		
		//todo изменить на реальные данные в проде
		ИнфоОбОрганизации = Новый Структура();
		ИнфоОбОрганизации.Вставить("ИНН", 							"enter_your_inn");
		ИнфоОбОрганизации.Вставить("КПП", 							"enter_your_kpp");
		ИнфоОбОрганизации.Вставить("Наименование",					"enter_your_name");	
		Контекст.Вставить("ИнфоОбОрганизации", 						ИнфоОбОрганизации);
		
		//todo изменить на реальные данные в проде
		ИнфоКонтактногоЛица = Новый Структура();
		ИнфоКонтактногоЛица.Вставить("Фамилия", 					"enter_your_last_name");
		ИнфоКонтактногоЛица.Вставить("Имя", 						"enter_your_first_name");
		ИнфоКонтактногоЛица.Вставить("Отчество",					"enter_your_first_patronymic");	
		ИнфоКонтактногоЛица.Вставить("Email",						"enter_your_email");	
		ИнфоКонтактногоЛица.Вставить("Телефон",						"enter_your_phone");	
		Контекст.Вставить("ИнфоКонтактногоЛица", 					ИнфоКонтактногоЛица);
		
		//todo изменить на реальные данные в проде
		ИнфоКриптография = Новый Структура();
		ИнфоКриптография.Вставить("ПутьКПрограмме",					"""C:\Program Files\Crypto Pro\CSP\cryptcp.x64.exe""");
		ИнфоКриптография.Вставить("ДанныеСертификата",				"""РомашкаСерв,E=rom@shka.ru""");
		Контекст.Вставить("ИнфоКриптография", 						ИнфоКриптография);		
		
	КонецЕсли;
	
	Если НЕ Контекст.Свойство("AccessTokenStruct")
		ИЛИ Контекст.AccessTokenStruct.expireTime < (ТекущаяДата() - 180) Тогда //Ключ, которому жить менее 3 минут считаем протухшим
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
			ЗаписатьJSON(ЗаписьJSON, Контекст.masterToken); 
			СтрокаJSON = ЗаписьJSON.Закрыть();
			HTTPЗапрос = Новый HTTPЗапрос("/auth/v1/token");	
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON); 
			
			HTTPОтвет 		= Контекст.HTTPСоединение.POST(HTTPЗапрос);
			ВремяОтвета 	= ТекущаяДата();
			JSONОтвет		= HTTPОтвет.ПолучитьТелоКакСтроку();
			
			ЧтениеJSON		= Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(JSONОтвет);
			СтруктураОтвет	= ПрочитатьJSON(ЧтениеJSON, , "expireTime", ФорматДатыJSON.ISO);
			ЧтениеJSON.Закрыть();	
			
			Контекст.Вставить("AccessTokenStruct", СтруктураОтвет);	
			Контекст.AccessTokenStruct.Вставить("AccessTokenBase64", ЗакодироватьСтрокувBase64(СтруктураОтвет.AccessToken));	
	КонецЕсли;
			
КонецПроцедуры

#Область СериализацияДанных

Функция СоздатьФабрикуXDTOПоСхеме(ИмяМакетаСхемы)
	
	ПутьКСхемеОбмена						= ПолучитьИмяВременногоФайла("xsd");
	ПолучитьМакет(ИмяМакетаСхемы).Записать(ПутьКСхемеОбмена);
	л_ФабрикаXDTO 							= СоздатьФабрикуXDTO(ПутьКСхемеОбмена);
	УдалитьФайлы(ПутьКСхемеОбмена);
	
	Возврат л_ФабрикаXDTO;

КонецФункции

Функция ЗакодироватьСтрокуВBase64(Строка)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	Запись = Новый ЗаписьТекста(ВременныйФайл, Контекст.Кодировка);
	Запись.Записать(Строка);
	Запись.Закрыть();
	
	Encoded = ЗакодироватьФайлВBase64(ВременныйФайл);
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Encoded;
	
КонецФункции

Функция ЗакодироватьФайлВBase64(ПутьКФайлу)
	
	ДвДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Encoded = Base64Строка(ДвДанные);

	//переводим utf-8 bom в utf
	Если Лев(Encoded, 4) = "77u/" Тогда 
		Encoded = Сред(Base64Строка(ДвДанные), 5, 999999999999999999999999999999999999999999999999999);
	КонецЕсли;	
	
	//удаляем переносы строк из строки base64
	Encoded = СтрЗаменить(Encoded, Символы.ПС, "");
	Encoded = СтрЗаменить(Encoded, Символы.ПФ, "");
	Encoded = СтрЗаменить(Encoded, Символы.ВК, "");
	
	Возврат Encoded;
	
КонецФункции

Функция СоздатьФайлИзСтроки(СтрокаXML)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьТекста(ВременныйФайл, Контекст.Кодировка);
	Запись.Записать(СтрокаXML);
	Запись.Закрыть();
	
	//переводим utf-8 bom в utf
	Если Контекст.Кодировка = "UTF-8" Тогда 
		ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
		Encoded = Base64Строка(ДвДанные);

		Если Лев(Encoded, 4) = "77u/" Тогда 
			Encoded = Сред(Base64Строка(ДвДанные), 5, 999999999999999999999999999999999999999999999999999);
		КонецЕсли;	

		ДД = Base64Значение(Encoded);
		ДД.Записать(ВременныйФайл);	
	КонецЕсли;
	
	Возврат ВременныйФайл;
	
КонецФункции

Функция ЗаполнитьСвПрофУч(л_ФабрикаXDTO, Документ)
	
	СвойствоXDTO_СвПрофУч					= Документ.Тип.Свойства.Получить("СвПрофУч");
	ОбъектXDTO_СвПрофУч						= л_ФабрикаXDTO.Создать(СвойствоXDTO_СвПрофУч.Тип);
	ОбъектXDTO_СвПрофУч.ИННПрофУч			= Контекст.ИнфоОбОрганизации.ИНН;
	ОбъектXDTO_СвПрофУч.КПППрофУч			= Контекст.ИнфоОбОрганизации.КПП;
	ОбъектXDTO_СвПрофУч.НаимПрофУч			= Контекст.ИнфоОбОрганизации.Наименование;
	
	Возврат ОбъектXDTO_СвПрофУч;
	
КонецФункции

Функция ЗаполнитьСвФЛ(л_ФабрикаXDTO, Документ, СведенияФЛ, ПространствоИмен)
	
	СвойствоXDTO_СвФЛ						= Документ.Тип.Свойства.Получить("СвФЛ");
	ОбъектXDTO_СвФЛ							= л_ФабрикаXDTO.Создать(СвойствоXDTO_СвФЛ.Тип);
    ОбъектXDTO_ФИО							= л_ФабрикаXDTO.Создать(л_ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
	ОбъектXDTO_ФИО.Фамилия					= СведенияФЛ.Фамилия;
	ОбъектXDTO_ФИО.Имя						= СведенияФЛ.Имя;
	ОбъектXDTO_ФИО.Отчество					= СведенияФЛ.Отчество;
	ОбъектXDTO_СвФЛ.ФИО						= ОбъектXDTO_ФИО;
	ОбъектXDTO_СвФЛ.ДатаРожд 				= СведенияФЛ.ДатаРожд;
	Если СведенияФЛ.Свойство("ИННФЛ") Тогда 
		ОбъектXDTO_СвФЛ.ИННФЛ	 				= СведенияФЛ.ИННФЛ;
	КонецЕсли;
    ОбъектXDTO_УдЛичнФЛ						= л_ФабрикаXDTO.Создать(л_ФабрикаXDTO.Тип(ПространствоИмен, "УдЛичнФЛТип"));
	ОбъектXDTO_УдЛичнФЛ.КодВидДок			= СведенияФЛ.КодВидДок;
	ОбъектXDTO_УдЛичнФЛ.СерНомДок			= СведенияФЛ.СерНомДок;
	ОбъектXDTO_СвФЛ.УдЛичнФЛ				= ОбъектXDTO_УдЛичнФЛ;
	
	Возврат ОбъектXDTO_СвФЛ;
	
КонецФункции
	
Функция ЗаполнитьСвИИСФЛ(л_ФабрикаXDTO, Документ, СведенияФЛ, ТипВычета)
	
	СвойствоXDTO_СвИИСФЛ						= Документ.Тип.Свойства.Получить("СвИИСФЛ");
	ОбъектXDTO_СвИИСФЛ							= л_ФабрикаXDTO.Создать(СвойствоXDTO_СвИИСФЛ.Тип);
	ОбъектXDTO_СвИИСФЛ.ДатаДог					= СведенияФЛ.ДатаДог;
	ОбъектXDTO_СвИИСФЛ.НомДог					= СведенияФЛ.НомДог;
	ОбъектXDTO_СвИИСФЛ.ДатаОткИИС				= СведенияФЛ.ДатаОткИИС;
	ОбъектXDTO_СвИИСФЛ.СтатИИС					= СведенияФЛ.СтатИИС;	
	
	Если ТипВычета = "А" Тогда 
		СвойствоXDTO_СумДСИИС					= СвойствоXDTO_СвИИСФЛ.Тип.Свойства.Получить("СумДСИИС");
		ОбъектXDTO_СумДСИИС						= л_ФабрикаXDTO.Создать(СвойствоXDTO_СумДСИИС.Тип);
		ОбъектXDTO_СумДСИИС.Период				= СведенияФЛ.Период;
		СвойствоXDTO_ОбщСумДСИИС				= СвойствоXDTO_СумДСИИС.Тип.Свойства.Получить("ОбщСумДСИИС");
		ОбъектXDTO_ОбщСумДСИИС					= л_ФабрикаXDTO.Создать(СвойствоXDTO_ОбщСумДСИИС.Тип);
		Для Каждого Элемент Из СведенияФЛ.ОбщСумДСИИС Цикл 
			ОбъектXDTO_ОбщСумДСИИС				= л_ФабрикаXDTO.Создать(СвойствоXDTO_ОбщСумДСИИС.Тип);
			ОбъектXDTO_ОбщСумДСИИС.ДатаВнДС		= Элемент.ДатаВнДС;
			ОбъектXDTO_ОбщСумДСИИС.СуммаДС		= Элемент.СуммаДС;
			ОбъектXDTO_СумДСИИС.ОбщСумДСИИС.Добавить(ОбъектXDTO_ОбщСумДСИИС);
		КонецЦикла;	
		ОбъектXDTO_СумДСИИС.НалТО				= СведенияФЛ.НалТО;
		ОбъектXDTO_СумДСИИС.ОборотФонд			= Число(СведенияФЛ.ОборотФонд);
		ОбъектXDTO_СумДСИИС.ОборотВнебирж		= СведенияФЛ.ОборотВнебирж;
		ОбъектXDTO_СвИИСФЛ.СумДСИИС				= ОбъектXDTO_СумДСИИС;
	КонецЕсли;

	Возврат ОбъектXDTO_СвИИСФЛ;
	
КонецФункции

#КонецОбласти

Функция ПодписатьФайл(ПутьКФайлу, УдалятьПереносыСтрок = Ложь)
	
	ПутьКПодписи		= СтрШаблон("%1.sgn", ПутьКФайлу);
	КодВозврата			= Неопределено;
	
	ЗапуститьПриложение(СтрШаблон("%1 -signf -dir %2 -dn %3 -uMy %4"
									, Контекст.ИнфоКриптография.ПутьКПрограмме
									, КаталогВременныхФайлов()
									, Контекст.ИнфоКриптография.ДанныеСертификата 
									, ПутьКФайлу), , Истина, КодВозврата);
									
	ТекстовыйДокумент						= Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ПутьКПодписи);
	Подпись 								= ТекстовыйДокумент.ПолучитьТекст();
	Если УдалятьПереносыСтрок Тогда 
		Подпись									= СтрЗаменить(Подпись, Символы.ПС, "");
		Подпись									= СтрЗаменить(Подпись, Символы.ПФ, "");
		Подпись									= СтрЗаменить(Подпись, Символы.ВК, "");
	КонецЕсли;

	Если НЕ Контекст.Отладка Тогда
		УдалитьФайлы(ПутьКПодписи);
	КонецЕсли;
	
	Возврат Подпись; 									
	
КонецФункции

#КонецОбласти

